<template>
<view class="liveScreen">
	<live-pusher 
		id='livePusher' 
		ref="livePusher" 
		class="livePusher" 
		url=""
	    mode="SD" 
		:muted="true" 
		:enable-camera="true" 
		:auto-focus="true" 
		:beauty="1" 
		:style="{'height': `${config.winHeight}px`}"
		device-position="back"
		whiteness="2"
	    aspect="9:16" 
		@statechange="statechange"
		@error = "error"
	></live-pusher>
	<template v-if="live.liveInfo">
		<template v-for="(item,i) in live.liveInfo.voice_media">
			<video
				v-if="i<limit"
				:id="`vDom${i}`"
				:src="item.tempFilePath||item.full_path" 
				:key="i"
				:autoplay="live.current===i"
				:muted="live.isplay"
				@ended="partEnd" 
				@error="interrupt"
				class="none"
			></video>
		</template>
	</template>
	<!-- 直播间贴图区 -->
	<image class="top" :src="top_img" mode="aspectFit" v-if="top_img"></image>
	<image class="left" :src="left_img" mode="widthFix" v-if="left_img"></image>
	<image class="right" :src="right_img" mode="widthFix" v-if="right_img"></image>
	<image class="bottom" :src="bottom_img" mode="aspectFit" v-if="bottom_img"></image>
	<!-- 商品图 -->
	<view class="goods">
		<image class="pic" src="" mode="aspectFill"></image>
		<up-text :lines="1" text="中秋月饼礼盒抢鲜" color="#333" size="22rpx"></up-text>
	</view>
</view>
</template>

<script>
import { onLoad, onHide } from '@dcloudio/uni-app'
import { useConfigStore, useLiveStore } from '@/stores'
import { getLiveRoom, errorStatistics } from '@/api'
import { randomArr, downLoadAudio } from '@/utils/helper'
import { ref } from 'vue'

export default {
	data() {
		return {
			context: null,
		}
	},
	computed:{
		// ...mapState('useConfigStore', ['winHeight'])
	},
	setup() {
		const config = useConfigStore()
		const live = useLiveStore()
		const limit = ref(2) // 控制video渲染个数
		const top_img = ref('')
		const left_img = ref('')
		const right_img = ref('')
		const bottom_img = ref('')
		let round = 1, i = 0, voiceArr = []; // 轮数和当前播放的第几个
		
		const getItem = (media)=> {
			const { title, upload } = media
			return {"full_path": upload.full_path, "title": title||upload.name};
		}
		function interrupt(event){ // 播放中断
			try{
				errorStatistics({...event, media: live.liveInfo.voice_media[live.current]})
			}catch(e){ }
		}
		function nextRound(){ // 播放下一轮
		    if(live.liveInfo.sort_type==2 && voiceArr.length>2){
				// 开启了随机播放
				voiceArr = randomArr(voiceArr)
		    }
		    i = 0
		    round++
		}
		function partEnd(){
			if(i===(voiceArr.length-1)){ // 下一轮 播放第一个音频
			    nextRound()
			}else{ // 当前轮 播放下一个音频
			    i++
				if(limit.value < voiceArr.length){
					limit.value++
				}
			}
			live.setCurrent(voiceArr[i])
			var vdom = live.vRef[live.current]
			vdom.play()
		}
		onLoad(()=>{
			getLiveRoom().then(res=>{
				if(res&&res.data){
					const { voice, answer_keyword, answer_id, get_top, get_left, get_right, get_bottom } = res.data
					const { sort_type, get_media } = voice
					const vRef = []
					console.log(1111, voice)
					top_img.value = get_top ? get_top.full_path : '';
					left_img.value = get_left ? get_left.full_path : '';
					right_img.value = get_right ? get_right.full_path : ''; 
					bottom_img.value = get_bottom ? get_bottom.full_path : ''; 

					const voice_media = get_media.map((media, i)=>{
						const vdom = uni.createVideoContext(`vDom${i}`)
						vRef.push(vdom)
						return getItem(media)
					})
					// 开始下载音频资源
					downLoadAudio(voice_media, (arr)=>{
						live.setLiveDom(vRef)
						voiceArr = voice_media.map((item, index)=>index)
						const info = {
							sort_type,
							voice_media: arr,
							answer_id,
							reply: answer_keyword.map((item)=>{
								return {
									keywords: item.keywords,
									media: item.get_midia.map(getItem)
								}
							})
						}
						live.setLiveInfo(info)
						live.setCurrent(0)
						// 先预加载第一段直播音频
						nextTick(()=>{
							if(vRef[0]) vRef[0].play()
						})
					})
				}
			})
		})
		
		return { 
			config, live, limit, interrupt, partEnd, top_img, left_img, right_img, bottom_img,
		}
	},
	onReady() {
		// 隐藏顶部电池,时间等信息 
		plus.navigator.setFullscreen(true);
		// 注意：需要在onReady中 或 onLoad 延时
		if(!this.context){
			this.context = uni.createLivePusherContext("livePusher", this);
		}
		this.startPreview()
	},
	onBackPress(){
		plus.navigator.setFullscreen(false);
	},
	beforeUnmount(){
		if(this.context){
			this.stopPreview()
			this.context = null
		}
	},
	methods: {
		switchCamera: function() {
			this.context.switchCamera({
				success: (a) => {
					console.log("livePusher.switchCamera:" + JSON.stringify(a));
				}
			});
		},
		startPreview: function() {
			this.context.startPreview({
				success: (a) => {
					console.log("livePusher.startPreview:" + JSON.stringify(a));
				}
			});
		},
		stopPreview: function() {
			this.context.stopPreview({
				success: (a) => {
					console.log("livePusher.stopPreview:" + JSON.stringify(a));
				}
			});
		}
	}
}
</script>

<style lang="scss" scoped>
.liveScreen{
	display: flex;
	flex-direction: column;
	justify-content: center;
	position: relative;
	.livePusher {
		width: 750rpx;
		background-color: #808080;
	}
	.fixedScreen{
		width: 750rpx;
		position: fixed;
		top: 0;
		left: 0;
		.block{
			width: 400rpx;
			height: 400rpx;
			background-color: aqua;
		}
	}
	.none{
		position: absolute;
		top: 0;
		z-index: 0;
		width: 1px;
		height: 1px;
		opacity: 0;
	}
	.top{
		width: 750rpx;
		height: 374rpx;
		position: fixed;
		top: 0;
		left: 0;
	}
	.bottom{
		width: 750rpx;
		height: 270rpx;
		position: fixed;
		bottom: 0;
		left: 0;
	}
	.left{
		width: 260rpx;
		position: absolute;
		left: 0;
	}
	.right{
		width: 260rpx;
		position: absolute;
		right: 0;
	}
	.goods{
		width: 230rpx;
		height: 356rpx;
		background: #ffffff;
		border: 2rpx solid;
		border-image: linear-gradient(0deg, #ffa000 0%, #f1341f 100%) 2 2;
		border-radius: 10rpx;
	}
}
</style>